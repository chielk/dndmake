#!/usr/bin/env python3

import argparse
import csv
import logging
from character import Character, Speed, Size, character_from_url


def parse_animals(animaldb_file):
    animals = []
    logging.info("Parsing animal database.")
    with open(animaldb_file, 'r') as animal_file:
        dialect = csv.Dialect
        animal_db = csv.reader(animal_file, dialect=csv.excel_tab)
        header = next(animal_db)

        for counter, animal in enumerate(animal_db):
            a = Character(dict(zip(header, animal)))
            animals.append(a)
            logging.debug("Creating animal  %d - '%s'." % (counter, a.name))
    return animals


def write_to_file(filename, wildshapes):
    with open(filename, 'w') as f:
        for wildshape in wildshapes:
            f.write(str(wildshape))
            f.write('\n')
            f.write(79 * '=')
            f.write('\n')


_ORDER_KEYS = ['name', 'size', 'ac', 'init',
               'str', 'dex', 'con', 'int', 'wis', 'cha',
               'fort', 'reflex', 'will',
               'melee', 'grapple', 'ranged'] +\
              [modus for modus in Speed.MODUS if modus]  # Remove empty string


def parse_args():
    arg_parser = argparse.ArgumentParser(description="Scrapes an online "
                                         "character sheet and applies all "
                                         "animal templates for wildshape "
                                         "stats.")
    arg_parser.add_argument('-o', '--order', default='name',
                            choices=_ORDER_KEYS,
                            help="Sort results based on some property of the "
                            "final form.")
    arg_parser.add_argument('-d', '--hd-cap', action='store_true',
                            help="Only show results of animals with fewer HD "
                            "than your level.")
    arg_parser.add_argument('-x', '--ex', help="Only show results that have "
                            "this extraordinary special attack.")
    arg_parser.add_argument('-s', '--size', action='append',
                            choices=[s[0][0] for s in Size.SIZE_MODS],
                            help="Only show results of this size.")
    arg_parser.add_argument('-a', '--animals', default="animaldb.csv",
                            help="The tab-separated file with animal data.")
    arg_parser.add_argument('url', nargs='?',
                            default=r'http://www.thetangledweb.net/forums/'
                                    'profiler/view_char.php?cid=75945',
                            help="The URL of the sheet to scrape.")
    arg_parser.add_argument('-f', '--output-file',
                            help="Write output to file, for easy future"
                                 "lookup.")
    return arg_parser.parse_args()


def wildshape_sort_key(key):
    if key in [modus for modus in Speed.MODUS if modus]:  # Remove empty str
        return lambda x: getattr(x.speed, key)
    elif key in ['melee', 'grapple', 'ranged']:
        return lambda x: getattr(x, key)[0]
    else:
        return lambda x: getattr(x, key)


def main():
    args = parse_args()
    character = character_from_url(args.url)
    animals = parse_animals(args.animals)
    wildshapes = []
    exs = set()
    for animal in animals:
        try:
            wildshaped_character = character.wildshape(animal, args.hd_cap)
            wildshapes.append(wildshaped_character)
            for ex in wildshaped_character.exAttacks:
                exs.add(ex.lower())
        except ValueError:
            pass
    if args.size is not None:
        wildshapes = [w for w in wildshapes if w.size.size[0] in args.size]
    if args.ex is not None:
        wildshapes = [w for w in wildshapes if args.ex in w.ex]
    wildshapes.sort(key=wildshape_sort_key(args.order))
    if args.output_file is not None:
        write_to_file(args.output_file, wildshapes)
    else:
        for wildshape in wildshapes:
            print(wildshape)


if __name__ == "__main__":
    main()
