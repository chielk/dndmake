#compdef dndmake
# ------------------------------------------------------------------------------
# Copyright (c) 2011 Github zsh-users - http://github.com/zsh-users
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the zsh-users nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL ZSH-USERS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# ------------------------------------------------------------------------------
# Description
# -----------
#
#  Completion script for Play! framework 1.2.2 (http://www.playframework.org).
#
# ------------------------------------------------------------------------------
# Authors
# -------
#
#  * Julien Nicoulaud <julien.nicoulaud@gmail.com>
#  * Mario Fernandez (https://github.com/sirech)
#
# ------------------------------------------------------------------------------


_dnd() {
  local context curcontext="$curcontext" state line
  typeset -A opt_args

  local ret=1

  _arguments -C \
    '1: :_play_cmds' \
    '*::arg:->args' \
  && ret=0

  case $state in
    (args)
      curcontext="${curcontext%:*:*}:play-cmd-$words[1]:"
      case $line[1] in
        (build-module|list-modules|lm|check|id)
          _message 'no more arguments' && ret=0
        ;;
        (wildshape|wi)
          local sizes attributes
          sizes=('F' 'D' 'T' 'S' 'M' 'L' 'H' 'G' 'C')

          attributes=('name' 'size' 'ac' 'init' 'str' 'dex' 'con' 'int' 'wis'
                      'cha' 'fort' 'reflex' 'will' 'melee' 'grapple' 'ranged'
                      'land' 'burrow' 'swim' 'climb' 'fly')

          _arguments \
            '(-h --help)'{--help,-h}'[show this help message and exit]'\
            '(-v --version)'{--version,-v}'[print version and exit]'\
            '(--hd-cap -d)'{--hd-cap,-d}'[only show results of animals with fewer HD than your level]'\
            '(--list -l)'{--list,-l}'[list the known characters]'\
            '(--ex -x)'{--ex,-x}'+[only show results that have this extraordinary special attack]:extraordinary attack name::'\
            '(--animals -a)'{--animals,-a}'+[The tab-separated file with animal data]:animalsdb file:_files'\
            '(--output-file -f)'{--output-file,-f}'+[write output to file]:output file:_files'\
            '(--character -c)'{--character,-c}'+[character to use]:character first name:'\
            '(--order -o)'{--order,-o}'+:sort results based on some attribute:($attributes)'\
            '(--size -s)'{--size,-s}'+:only show results of this size:($sizes)'\
          && ret=0
        ;;
        (npc)
          local races alignments

          races=(/etc/dndmake/races/*(:t:r:gs/_/-/))  # Default races
          if [[ -d ~/.dndmake/races ]]; then          # Custom races
            races=($races ~/.dndmake/races/*(:t:r:gs/_/-/))
          fi
          races=(${(u)races[@]})                      # make unique

          alignments=('LG' 'LN' 'LE' 'NG' 'NN' 'NE' 'CG' 'CN' 'CE')

          _arguments \
            {--help,-h}'[show this help message and exit]'\
            '(--male -m --female -f)'{--male,-m}'[make a male character]'\
            '(--female -f --male -m)'{--female,-f}'[make a female character]'\
            '(--short -s --tall -t)'{--short,-s}'[make a short character]'\
            '(--tall -t --short -s)'{--tall,-t}'[make a tall character]'\
            '(--light -l --heavy -b)'{--light,-l}'[make a light character]'\
            '(--heavy -b --light -l)'{--heavy,-b}'[make a heavy character]'\
            '(--name -n)'{--name,-n}'[character name]'\
            '(-a --alignment)'{-a,--alignment}':alignment:($alignments)'\
            ':race:($races)'\
          && ret=0
        ;;
        (init)
          _message 'create a dnd campaign in the current directory'\
          && ret=0
        ;;
      esac
    ;;
  esac
}

(( $+functions[_play_cmds] )) ||
_play_cmds() {
  local commands; commands=(
    'init:create dndmake campaign'
    'npc:generate a non-player character'
    {wildshape,wi}':apply animal templates to a character'
    {--help,-h}':show this help message and exit'
    {--version,-v}':print version and exit'
  )
  _describe -t commands 'dndmake command' commands "$@"
}


_dnd "$@"

# vim: ft=zsh sw=2 ts=2 et
