#!/usr/bin/env python3
# dndmake - generate a random NPC with height, weight according to D&D, hair
# and eye colour, and a personality based on
# http://en.wikipedia.org/wiki/Big_Five_personality_traits
# (c) Chiel Kooijman 2014

"""
Openness to experience: (inventive/curious vs. consistent/cautious).
Appreciation for art, emotion, adventure, unusual ideas, curiosity, and variety
of experience. Openness reflects the degree of intellectual curiosity,
creativity and a preference for novelty and variety a person has. It is also
described as the extent to which a person is imaginative or independent, and
depicts a personal preference for a variety of activities over a strict
routine. Some disagreement remains about how to interpret the openness factor,
which is sometimes called "intellect" rather than openness to experience.

Conscientiousness: (efficient/organized vs. easy-going/careless). A tendency to
be organized and dependable, show self-discipline, act dutifully, aim for
achievement, and prefer planned rather than spontaneous behavior.

Extraversion: (outgoing/energetic vs. solitary/reserved). Energy, positive
emotions, surgency, assertiveness, sociability and the tendency to seek
stimulation in the company of others, and talkativeness.

Agreeableness: (friendly/compassionate vs. analytical/detached). A tendency to
be compassionate and cooperative rather than suspicious and antagonistic
towards others. It is also a measure of one's trusting and helpful nature, and
whether a person is generally well tempered or not.

Neuroticism: (sensitive/nervous vs. secure/confident). The tendency to
experience unpleasant emotions easily, such as anger, anxiety, depression, and
vulnerability. Neuroticism also refers to the degree of emotional stability and
impulse control and is sometimes referred to by its low pole, "emotional
stability".
"""

import argparse
import sys
from simpleunit import Weight


def parse_arguments():
    """Parse command-line arguments."""

    descr = """Generate a D&D character with a gender and a height and weight
    based on the gender. Furthermore they have a hair and eye colour and a
    personality based on the five-factor model (FFM), which influences their
    alignment. Gender, height, weight and alignment can also be influenced or
    forced through arguments."""

    parser = argparse.ArgumentParser(description=descr)
    parser.add_argument("-m", "--male", action="store_true",
                        help="Make a male character")
    parser.add_argument("-f", "--female", action="store_true",
                        help="Make a female character")
    parser.add_argument("-t", "--tall", action="store_true",
                        help="Make a tall character")
    parser.add_argument("-s", "--short", action="store_true",
                        help="Make a short character")
    parser.add_argument("-b", "--heavy", action="store_true",
                        help="Make a heavy character")
    parser.add_argument("-l", "--light", action="store_true",
                        help="Make a light character")
    parser.add_argument("race", help="e.g. human, elf")
    parser.add_argument("alignment", nargs="?", default=None,
                        help="Lawfulness and goodness: [LNC][GNE]")
    parser.add_argument("-n", "--name", help="Character name")
    args = parser.parse_args()

    if args.alignment and args.alignment not in race.ALIGNMENTS:
        print("Illegal alignment: {}".format(args.alignment), file=sys.stderr)
        print("Options are: {}.".format(", ".join(race.ALIGNMENTS)),
                file=sys.stderr)
        sys.exit(1)

    if args.male and args.female:
        print("Can't make a charater that is both male and female.",
                file=sys.stderr)
        sys.exit(1)

    if args.tall and args.short:
        print("Can't make a character that is both tall and short.",
                file=sys.stderr)
        sys.exit(1)

    if args.heavy and args.light:
        print("Can't make a character that is both heavy and light.",
                file=sys.stderr)
        sys.exit(1)

    return args


if __name__ == "__main__":
    args = parse_arguments()

    try:
        Race = getattr(__import__("races"), args.race.lower().capitalize())
    except AttributeError:
        print("Unknown race:", args.race, file=sys.stderr)
        sys.exit(1)

    character = Race(args)
    print(character)
