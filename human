#!/usr/bin/env python3
# human - generate a random human with height, weight according to D&D, hair
# and eye colour, and a personality based on
# http://en.wikipedia.org/wiki/Big_Five_personality_traits
# (c) Chiel Kooijman 2014

"""
Openness to experience: (inventive/curious vs. consistent/cautious).
Appreciation for art, emotion, adventure, unusual ideas, curiosity, and variety
of experience. Openness reflects the degree of intellectual curiosity,
creativity and a preference for novelty and variety a person has. It is also
described as the extent to which a person is imaginative or independent, and
depicts a personal preference for a variety of activities over a strict
routine. Some disagreement remains about how to interpret the openness factor,
which is sometimes called "intellect" rather than openness to experience.

Conscientiousness: (efficient/organized vs. easy-going/careless). A tendency to
be organized and dependable, show self-discipline, act dutifully, aim for
achievement, and prefer planned rather than spontaneous behavior.

Extraversion: (outgoing/energetic vs. solitary/reserved). Energy, positive
emotions, surgency, assertiveness, sociability and the tendency to seek
stimulation in the company of others, and talkativeness.

Agreeableness: (friendly/compassionate vs. analytical/detached). A tendency to
be compassionate and cooperative rather than suspicious and antagonistic
towards others. It is also a measure of one's trusting and helpful nature, and
whether a person is generally well tempered or not.

Neuroticism: (sensitive/nervous vs. secure/confident). The tendency to
experience unpleasant emotions easily, such as anger, anxiety, depression, and
vulnerability. Neuroticism also refers to the degree of emotional stability and
impulse control and is sometimes referred to by its low pole, "emotional
stability".
"""

import random
import argparse
import sys
from simpleunit import Unit, Length, Weight, Inch


ALIGNMENT_LONG = {"LG": "Lawful Good",
                  "NG": "Neutral Good",
                  "CG": "Chaotic Good",
                  "LN": "Lawful Neutral",
                  "NN": "True Neutral",
                  "CN": "Chaotic Neutral",
                  "LE": "Lawful Evil",
                  "NE": "Neutral Evil",
                  "CE": "Chaotic Evil"}
ALGS = ALIGNMENT_LONG.keys()

LAWFULNESS_VARIANCE = range(-1, 1)
GOODNESS_VARIANCE = range(-2, 2)

ALIGN = [2, 1, -1, -2]  # Character trait index to alignment score

GENDERS = ["male", "female"]

HAIR = ["black", "brown", "blond", "ginger"]
HAIR_UNUSUAL = ["green", "blue", "white", "red"]

EYES = ["blue", "brown", "green"]
EYES_UNUSUAL = ["red", "violet"]

DIMENSIONS = ["open",  # chaos <-> law
              "conscientious",  # law <-> chaos
              "extravert",
              "agreeable",  # good <-> evil
              "neurotic"]  # evil <-> good, chaos <-> law

VALUES = {"open": ("inventive and curious", "curious", "cautious",
                   "cautious and conservative"),
          "conscientious": ("efficient and organized", "organized",
                            "a bit disorganized", "disorganized"),
          "extravert": ("outgoing and energetic", "outgoing", "reserved",
                        "solitary and reserved"),
          "agreeable": ("friendly and compassionate", "friendly",
                        "somewhat detached", "analytical and detached"),
          "neurotic": ("quickly angered", "somewhat nervous", "calm",
                       "calm and confident")}


# Helper functions
def roll(n):
    """Roll an n-sided die."""
    return random.randint(1, n)


def score_to_alignment(law, good):
    """Convert a lawfulness and goodness score to an alignment."""
    if law > 2:
        lawfulness = "L"
    elif law < -2:
        lawfulness = "C"
    else:
        lawfulness = "N"

    if good > 1:
        goodness = "G"
    elif good < -1:
        goodness = "E"
    else:
        goodness = "N"

    return lawfulness + goodness


def make_personality(wanted_alignment=None):
    """Make a random personality based on the Big Five Personality Traits.
    :param wanted_alignment: If a wanted alignment is given, it will make a
                             personality that is consistent with that alignment
    :returns: A tuple containing a personality and an alignment
    """
    while True:
        law = 0
        good = 0
        personality = []
        for dimension in DIMENSIONS:
            rand = random.randint(0, 3)
            if dimension == "open":
                law += ALIGN[rand]
            elif dimension == "conscientious":
                law -= ALIGN[rand]
            elif dimension == "agreeable":
                good += ALIGN[rand]
            elif dimension == "neurotic":
                good -= ALIGN[rand]
                law += ALIGN[rand]
            personality.append(VALUES[dimension][rand])

        if not wanted_alignment:
            # Add random element to alignment
            law += random.choice(LAWFULNESS_VARIANCE)
            good += random.choice(GOODNESS_VARIANCE)

            alignment = score_to_alignment(law, good)
            return alignment, personality
        else:
            for l in LAWFULNESS_VARIANCE:
                for g in GOODNESS_VARIANCE:
                    tmp_law = law + l
                    tmp_good = good + g
                    alignment = score_to_alignment(tmp_law, tmp_good)
                    if alignment == wanted_alignment:
                        return alignment, personality


# Parse command-line arguments
parser = argparse.ArgumentParser(description="Generate a D&D human.")
parser.add_argument("-m", "--male", action="store_true",
                    help="Make a male human")
parser.add_argument("-f", "--female", action="store_true",
                    help="Make a female human")
parser.add_argument("-t", "--tall", action="store_true",
                    help="Make a tall human")
parser.add_argument("-s", "--short", action="store_true",
                    help="Make a short human")
parser.add_argument("-b", "--heavy", action="store_true",
                    help="Make a heavy human")
parser.add_argument("-l", "--light", action="store_true",
                    help="Make a light human")
parser.add_argument("alignment", nargs="?", default=None,
                    help="Lawfulness and goodness: [LNC][GNE]")
parser.add_argument("-n", "--name", help="Character name")
args = parser.parse_args()

if args.alignment and args.alignment not in ALGS:
    sys.stderr.write("Illegal alignment: {}\n".format(args.alignment))
    sys.stderr.write("Options are: {}.\n".format(", ".join(ALGS)))
    sys.exit(1)
# Personality and alignment
alignment, personality = make_personality(wanted_alignment=args.alignment)

# Gender
if args.male and args.female:
    sys.stderr.write("Can not make a human that is both male and female.\n")
    sys.exit(1)
elif args.male:
    gender = "male"
elif args.female:
    gender = "female"
else:
    gender = random.choice(GENDERS)

pronoun = "he" if gender == "male" else "she"

# Height and weight
if args.tall and args.short:
    sys.stderr.write("Can not make a human that is both tall and short.\n")
    sys.exit(1)
elif args.tall:
    size_h = 11 + roll(5) + roll(4)
elif args.short:
    size_h = roll(6) + roll(6)
else:
    size_h = roll(10) + roll(10)

if args.heavy and args.light:
    sys.stderr.write("Can not make a human that is both tall and short.\n")
    sys.exit(1)
elif args.heavy:
    size_w = 3 + roll(3) + roll(2)
elif args.light:
    size_w = roll(2) + roll(3)
else:
    size_w = roll(4) + roll(4)

# Gender  Base Height Height Modifier Base Weight Weight Modifier
# Male    4' 10"      +2d10           120 lb.     x (2d4) lb.
# Female  4' 5"       +2d10           85 lb.      x (2d4) lb.


if gender == "male":
    height = Length(ft=4, inch=10) + Inch() * size_h
    weight = Weight(lbs=120) + Weight(lbs=size_w) * size_h
else:
    height = Length(ft=4, inch=5) + Inch() * size_h
    weight = Weight(lbs=85) + Weight(lbs=size_w) * size_h

# Hair and eye colours
if random.random() > .9:
    hair = random.choice(HAIR_UNUSUAL)
else:
    hair = random.choice(HAIR)

if random.random() > .9:
    eyes = random.choice(EYES_UNUSUAL)
else:
    eyes = random.choice(EYES)

# Output
if args.name:
    name = args.name
else:
    name = "Your character"

s = "{} is a {} ({}) {}, {} ({}) tall and weighs {} ({}). {} has "\
    "{} hair and {} eyes.\n{} is "
s = s.format(name,
             ALIGNMENT_LONG[alignment],
             alignment,
             gender, height.metric(),
             height.imperial(),
             weight.metric(),
             weight.imperial(),
             pronoun.capitalize(),
             hair,
             eyes,
             pronoun.capitalize())
s += ", ".join(personality[:-1]) + ", and " + personality[-1] + "."
print(s)
